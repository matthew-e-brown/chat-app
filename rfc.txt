RFC: 4310-0648289

                        MESSAGING PROTOCOL SPECIFICATION                        

                                  MATTHEW BROWN                                 
                                  FEBRUARY 2021                                 

                                  RFC VERSION 1                                 



--------------------------------------------------------------------------------



                               TABLE OF CONTENTS                                

1.  SUMMARY

2.  PACKET DESCRIPTION

    2.1.  Header
    2.2.  Data

3.  MESSAGE ACTIONS

    3.1.  Sent by the client

          3.1.1.  Command list

    3.2.  Sent by the server



--------------------------------------------------------------------------------



                                  1.  SUMMARY                                   

This document outlines the specifications for how 4310H messaging applications
should behave. It describes the data types to be used by both a client and
server communicating between one another. It lists which actions both the server
and client may take and how the other should respond to and/or handle those
actions.



                             2.  PACKET DESCRIPTION                             

Every single communication between client and server should be done using a
predefined packet structure. In the current specification, this structure is
exactly 386 bytes long. It consists of a 128 byte header section and a 256 byte
payload.


2.1.  Header

    In RFC version 1., each packet header has the following form:


            0            1            2            3            
           +------------+------------+------------+------------+
           |                         |                         |
           |     App/RFC version     |   Message type/action   |
           |                         |                         |
           +------------+------------+------------+------------+
         4 |                         |                         |
           |       Packet count      |       Packet index      |
           |                         |                         |
           +------------+------------+------------+------------+
         8 |                                                   |
           |                  sender username                  |
           |                     (16 bytes)                    |
           +                                                   +
        12 |                                                   |
           |                                                   |
           |                                                   |
           +                                                   +
        16 |                                                   |
           |                                                   |
           |                                                   |
           +                                                   +
        24 |                                                   |
           |                                                   |
           |                                                   |
           +------------+------------+------------+------------+
        28 |                                                   |
           |                 receiver username                 |
           |                     (16 bytes)                    |
           +                                                   +
        32 |                                                   |
           |                                                   |
           |                                                   |
           +                                                   +
        36 |                                                   |
           |                                                   |
           |                                                   |
           +                                                   +
        40 |                                                   |
           |                                                   |
           |                                                   |
           +------------+------------+------------+------------+
        44 |                                                   |
           .           padding, future use (88 bytes)          .
           .                                                   .
           .                                                   .
       124 +                .  .  .  .  .  .  .                +
           |                                                   |
           |                                                   |
           +------------+------------+------------+------------+

                            PACKET HEADER FORMAT                


    The first version of this header is kept intentionally small, with only 8
    bytes of metadata being sent alongside 32 bytes of usernames, for a total of
    40 bytes.

    For future use or for implementation-specific use, 88 bytes of padding is
    given. 128 total bytes was chosen arbitrarily for its large but
    not-too-large size and for being a nice, even power of two.

    The first section, "Application/RFC version" is simply an unsigned short
    which is meant to be incremented from 1 upwards. With each iteration of this
    RFC, things may change and/or shuffle around. So, the first two bytes of the
    package will always tell the two parties which version they are operating
    under. This is to help the two parties avoid indexing errors and other
    incompatibilities.

    The second section, "Message type/action", is a one of a preset number of
    shorts:

      - 0x0001 :: Login request
      - 0x0002 :: Whisper-type message
      - 0x0003 :: Broadcast-type message
      - 0x0004 :: Command
      - 0x000a :: Server message
      - 0x000b :: Acknowledgement
      - 0x000c :: Server error

    These actions are detailed in section three, MESSAGE ACTIONS. A short is
    used over a single byte to allow for future proofing by way of adding more
    specific types in the future.

    The third and fourth sections, "Packet count" and "Packet index", are used
    when segmenting information across multiple packets. Since the payload of
    each packet is a fixed size, anything larger than said size will need to be
    split up into multiple packets. These two fields allow the client and server
    to verify and re-order multiple packets.

    Finally, there are the two username fields. Usernames on this system are a
    maximum of 16 characters (16 bytes) long. In the event that a username is
    not needed (like how a broadcast does not have a direct recipient), the
    field should be set to all NULL (0x00) bytes.


2.2  Data

    The data section is 256 bytes long, and its use is left entirely up to the
    implementation. However, the only specification-defined use is for filling
    with ASCII plaintext.



                              3.  MESSAGE ACTIONS                               

In the current specification, there is only one type of message that may be sent
by both clients and servers: the acknowledgement. It is used simply as a
read-receipt of sorts, and the data payload for it is, by definition, empty.


3.1.  Sent by the client

    The client should be capable of sending four different types of messages to
    the server. Those four are:

      - a whisper message, meant to be sent to one other client;  
      - a broadcast message, to be sent to all other connected clients;  
      - a login request, containing the new client's user's username; and  
      - a command, to be run by the server with the expectation of receiving
        feedback.

    The first two of these message types are simple, regular messages, while the
    second two are meant for client-server communication.

    Whisper messages are required to have both sender usernames and receiver
    usernames filled in. The server is simply to re-route these messages to the
    recipient, with no extra processing. Optionally, the receiving client may
    respond to the server with an acknowledgement containing the original
    sender's name as the receiver name to act as a read receipt. This is
    implementation-dependent.

    Broadcast messages are much simpler. All the server has to do is to is
    redirect these messages to all connected clients. While it is not a strict
    enforcement, the specification recommends that the original sending client
    is excluded from this broadcast; like with whisper messages, an
    Acknowledgement message may instead be sent back to the original sender
    should the implementation so desire.

    Thirdly, there is the login request. This message type is unique in that it
    is not sent by the user directly. it is also unique in that it is the only
    message required by the specification to be responded to with an
    acknowledgement: all other instances of the Acknowledgement message-type are
    left up to the implementation.

    Commands are sent by the client to the server with the expectation that the
    server will perform some action. A list of current pre-defined commands are
    given below, in section 3.1.1. However, an implementation may define as may
    extra commands as it likes: as long as those provided by the specification
    are not overridden. Server responses to commands are disconnected from the
    original message: the response is not considered an acknowledgement. This
    means that, should the implementation choose to use an acknowledgement
    system, a server would reply with an acknowledgement to say that it has
    received the packet and validated it, and then reply separately once the
    command's execution is complete. This separate reply is to use the Server
    message message-type.


    3.1.1 Command list

        Currently, there is only one command pre-defined by the specification:

          - who

        The who command requires the server to give the asking client a list of
        all connected users. The format of this list is
        implementation-dependent, but it should be placed in the payload portion
        of a packet. The client then displays the information to the user.


3.2  Sent by the server

    In the current specification, there are only two message-types sent only by
    the server. Those two are:

      - A server message, a broad type meant for server-to-client
        communications; and
      - An error response, similar to a regular acknowledgement, but with the
        stipulation that something went wrong.

    Server messages are used for a variety of different tasks. Currently, there
    are three well-defined times when a Server message message-type should be
    used. Firstly and secondly, when a new client connects and disconnects, the
    server should tell all other connected clients of this news. Thirdly, when
    the server responds to a command. The payload of these commands can be
    anything, though it is usually just text to be displayed by the clients as
    if the server was a special type of regular user.

    Error messages do exactly as they sound. They are to be sent by the server
    whenever something goes wrong. The server is expected (though it is not
    required by the specification) to fill a reason for the error into the
    payload of the packet. A good example of when to use one is when the client
    asks the server to run a command which does not exist.



--------------------------------------------------------------------------------

                        MESSAGING PROTOCOL SPECIFICATION                        

                              END RFC DOCUMENTATION                             